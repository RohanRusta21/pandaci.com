---
import { Code } from "astro:components";
import Button from "../../Button.astro";
import { codeToHtml } from "shiki";

interface Props {
    code: string;
    lang: string;
    title?: string;
    inline?: boolean;
}

const { code, lang, title, inline = false } = Astro.props;

const content = await codeToHtml(code, {
    lang,
    themes: {
        light: "github-light",
        dark: "slack-dark",
    },
    colorReplacements: inline
        ? {
              "#222222": "transparent",
              "#fff": "transparent",
          }
        : {
              "#222222": "var(--color-surface-low)",
              "#fff": "var(--color-surface-low)",
          },
});
---

{
    !inline && (
        <div class="flex flex-col rounded-lg mt-4 not-prose w-full max-w-full bg-surface-low border-outline-variant border">
            <div class="flex items-center py-0.5 justify-between w-full text-sm text-on-surface bg-surface rounded-t-lg">
                <div class="flex gap-1 ml-2 w-12">
                    {Array.from({ length: 3 }).map((_, i) => (
                        <div class="bg-on-surface-variant/20 w-3 rounded-full h-3 hover:bg-on-surface-variant/50 transition" />
                    ))}
                </div>
                <span>{title}</span>
                <div class="w-12 flex items-end justify-center">
                    <Button
                        data-clipboard-text={code}
                        plain
                        aria-label="Copy code"
                        data-coppied="false"
                        type="button"
                        class="relative group mr-1 flex items-center justify-center cursor-pointer"
                    >
                        <span class="size-5" />
                        <svg
                            aria-hidden="true"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            class="size-6 group-data-[coppied='true']:opacity-0 text-on-surface-variant group-hover:text-on-surface transition absolute left-1/2 top-1/2 -translate-y-1/2 -translate-x-1/2 duration-300"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 0 0 2.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 0 0-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5A3.375 3.375 0 0 0 6.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0 0 15 2.25h-1.5a2.251 2.251 0 0 0-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 0 0-9-9Z"
                            />
                        </svg>

                        <svg
                            aria-hidden="true"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            class="size-6 text-primary group-data-[coppied='false']:opacity-0 transition absolute left-1/2 -translate-x-1/2 top-1/2 -translate-y-1/2 duration-300"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M11.35 3.836c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75 2.25 2.25 0 0 0-.1-.664m-5.8 0A2.251 2.251 0 0 1 13.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m8.9-4.414c.376.023.75.05 1.124.08 1.131.094 1.976 1.057 1.976 2.192V16.5A2.25 2.25 0 0 1 18 18.75h-2.25m-7.5-10.5H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V18.75m-7.5-10.5h6.375c.621 0 1.125.504 1.125 1.125v9.375m-8.25-3 1.5 1.5 3-3.75"
                            />
                        </svg>
                    </Button>
                </div>
            </div>
            <div
                class="p-4 overflow-x-auto [&_>_pre]:w-fit [&_>_pre]:pr-4 scrollbar-thin"
                set:html={content}
            />
        </div>
    )
}

{
    inline && (
        <div
            class="overflow-x-hidden no-lines [&_>_pre]:w-fit"
            set:html={content}
        />
    )
}

<script>
    function initCopy() {
        const btns = document.querySelectorAll("[data-clipboard-text]");

        btns.forEach((btn) => {
            btn.addEventListener("click", async (e) => {
                const text = btn.getAttribute("data-clipboard-text")!;
                await navigator.clipboard.writeText(text);
                btn.setAttribute("data-coppied", "true");
                setTimeout(() => {
                    btn.setAttribute("data-coppied", "false");
                }, 3000);
            });
        });
    }
    initCopy();
    document.addEventListener("astro:after-swap", initCopy);
</script>

<style is:global>
    @media (prefers-color-scheme: dark) {
        .shiki,
        .shiki span {
            color: var(--shiki-dark) !important;
            background-color: var(--shiki-dark-bg) !important;
            /* Optional, if you also want font styles */
            font-style: var(--shiki-dark-font-style) !important;
            font-weight: var(--shiki-dark-font-weight) !important;
            text-decoration: var(--shiki-dark-text-decoration) !important;
        }
    }
</style>
